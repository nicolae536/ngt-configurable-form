<ngt-configurable-form [formConfig]="config"
                           [fieldsDataProviders]="dataProviders">
    </ngt-configurable-form> 
So as examples for you I have implemented this using material design components. As the base for now I have the form configuration which can handle basic field linking, basic validations and data change events.
As the redux part what I noticed in the last time is that [(value)] and cycles in components like 
set value(myVal: any) {
	this.onMyValChanges.emit(myVal);
}
(onMyValChanges)=”emitActionValChanges($event)”

Are not really friendly with redux pattern in angular because will tringger at least two change detection cycles 
set value(myVal: any) {
	this.onMyValChanges.emit(new MyValue(myVal));
}

(onMyValChanges)=”emitActionValChanges($event)”
Will get you a nice infinite cycle. So what I wold like to do is create a basic integration with ngrx to prove the this component is fully compatible with redux pattern.



Slides


<!--<section>-->
        <!--<h3>Usable inputs and outputs</h3>-->
        <!--@Input() fieldsDataProviders: Dictionary&lt;Observable&lt;any&gt;&gt;-->
        <!--<p>In case we need to fetch some data to a field (select | autocomplete) using async calls</p>-->
        <!--@Input() fieldsListenersMap: Dictionary&lt;Subject&lt;any&gt;&gt;-->
        <!--<p>In case we need to listen to a value change on some input</p>-->
        <!--@Input() updateValues: Dictionary&lt;any&gt;-->
        <!--<p>Updates form controls with new values</p>-->
        <!--</section>-->
        <!--<section>-->
        <!--<h3>Usable inputs and outputs</h3>-->
        <!--@Input() formConfig: Observable&lt;IFormConfig> | IFormConfig;-->
        <!--<p>The current configuration</p>-->
        <!--@Output() onValueChange: EventEmitter&lt;Dictionary&lt;any&gt;&gt;-->
        <!--<p>Each time a value changes this event is triggered</p>-->
        <!--@Output() onValidityMapChange: EventEmitter&lt;Dictionary&lt;boolean&gt;&gt;-->
        <!--<p>Each time a validity of a control is updated a new map is generated</p>-->
        <!--</section>-->
        <!--<section>-->
        <!--<h3>Usable inputs and outputs</h3>-->
        <!--@Output() onConfigurationChange: EventEmitter&lt;IFormConfig&gt;-->
        <!--<p>Configuration changes if there is defined a link relation the configuration might change</p>-->
        <!--@Output() onValidityChange: EventEmitter&lt;boolean&gt;-->
        <!--<p>Form valid state updates</p>-->
        <!--</section>-->